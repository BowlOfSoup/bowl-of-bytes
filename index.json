[{"content":"The next quest in my homelab adventure was to make sure my domain name always points to my home network, even if my ISP changes my public IP address. See how I solved this with TransIP.\nThe challenge My ISP does not provide be with a static IPv4 or IPv6 address. This means that my public IP address can change. Not handy if you want to access your home network from the outside via a domain name. This can be solved by using a DDNS (Dynamic DNS) provider. DDNS automatically updates the DNS records of your domain whenever your IP address changes. A popular DDNS provider is e.g. DuckDNS\nBut. Since I\u0026rsquo;m a developer I wanted to build my on tool. Because quests without adventures are just chores, right?\nMy domain is registered at TransIP, a well known Dutch domain provider. TransIP provides a set of APIs to manage domain settings, like DNS records. If you have an account you can go to the API settings and generate a Key Pair to be able to access the API. You\u0026rsquo;ll get to see the private key only once, so make sure to store it somewhere safe.\nCoding the tool I choose to code the tool in Go. Mainly because I really like Go, and there is a good library to work with Transip APIs available on Github: transip/gotransip.\nYou can find the implementation here: BowlOfSoup/dynamic-ip-syncer.\nTo fetch my public IP addresses I use icanhazip.com. This is a simple service that returns your IPv4 and IPv6 address in plain text. The following URLs can be used:\nhttps://ipv4.icanhazip.com https://ipv6.icanhazip.com And as with all my Go projects, I make a fun Gopher-logo for it:\nCreated via gopherize.me.\nDeploying the tool to a server Ofc you should clone the repository and have Go installed on your machine before attempting to build the tool.\nAlso, I did not build an extensive build or install script or Docker container because of time constraints. But here are the steps I took:\n→ (1) Build the tool\nI myself build the tool for a Raspberry PI.\n1 GOOS=linux GOARCH=arm GOARM=7 go build -o build/dynamic-ip-syncer → (2) Transfer the binary to the server\n1 2 ssh YOUR_USER@YOUR_HOST \u0026#34;sudo mkdir -p /opt/dynamic-ip-syncer \u0026amp;\u0026amp; sudo chown YOUR_USER:pi /opt/dynamic-ip-syncer\u0026#34; scp build/dynamic-ip-syncer YOUR_USER@YOUR_HOST:/opt/dynamic-ip-syncer/ Now on the server itself, configure the tool to run as a service. I used systemd for this.\n→ (3) Create a .service file with the following content:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 [Unit] Description=Dynamic IP Syncer After=network.target [Service] ExecStart=/opt/dynamic-ip-syncer/dynamic-ip-syncer WorkingDirectory=/opt/dynamic-ip-syncer Restart=always Environment=CONFIG_PATH=/etc/dynamic-ip-syncer/config.yaml Environment=PRIVATE_KEY_PATH=/etc/dynamic-ip-syncer/private.key StandardOutput=journal StandardError=journal [Install] WantedBy=multi-user.target → (4) move the file to /etc/systemd/system/dynamic-ip-syncer.service and enable the service:\n1 2 3 sudo mv dynamic-ip-syncer.service /etc/systemd/system/ sudo chown root:root /etc/systemd.system/dynamic-ip-syncer.service \u0026amp;\u0026amp; sudo chmod 644 /etc/systemd/system/dynamic-ip-syncer.service sudo systemctl enable dynamic-ip-syncer → (5) Make sure to create a config.yaml file in /etc/dynamic-ip-syncer/ with the correct values, permissions should be root:root.\n→ (6) Make sure to create a private.key file in /etc/dynamic-ip-syncer/ with the private key you got from TransIP, permissions should be root:root.\n→ (7) Start the service; the service will run in the background, and starts on reboot.\n1 sudo systemctl start dynamic-ip-syncer You can view the logs with the following command:\n1 sudo journalctl -u dynamic-ip-syncer --since \u0026#34;2 hours ago\u0026#34; ","permalink":"https://bowlofbytes.com/posts/sync-non-static-ip-transip/","summary":"\u003cp\u003eThe next quest in my homelab adventure was to make sure my domain name always points to my home network,\neven if my ISP changes my public IP address. See how I solved this with TransIP.\u003c/p\u003e","title":"Sync a non-static IP with a domain provider via APIs"},{"content":"Sometimes when working with a homelab and VPN\u0026rsquo;s you just want to skip all the config and just create a tunnel to your home network and/or (Synology) NAS. Read how ZeroTier gets this done!\nWhat is ZeroTier? While WireGuard is a great VPN solution, it requires a bit of setup and configuration.\nZeroTier is a peer-to-peer software-defined networking (SDN) solution that creates secure virtual networks over the internet. It acts like a LAN regardless of physical location. It\u0026rsquo;s very easy to set up and even runs on Synology NAS devices.\nSign up for an account at ZeroTier.com and create a network. You will get a network ID that you can use to connect to.\nI won\u0026rsquo;t go into details on how the management screens work for ZeroTier, but it should be straightforward.\nInstallation on a jump box A jump box is a server that is used to access and \u0026lsquo;jump to\u0026rsquo; devices, e.g. a different server not directly accessible from the outside. I\u0026rsquo;m using my Raspberry Pi as a jump box.\n→ Login to the jump box and install ZeroTier.\n1 curl -s https://install.zerotier.com | sudo bash → Check the status and join your network:\n1 2 3 sudo zerotier-cli status sudo zerotier-cli join YOUR_NETWORK_ID sudo zerotier-cli listnetworks Now it should say something like \u0026rsquo;no access\u0026rsquo;, this is because you didn\u0026rsquo;t authorize this \u0026lsquo;member\u0026rsquo; yet. We\u0026rsquo;ll get to that later.\nInstallation on a Synology NAS I\u0026rsquo;ve got this directly from their website: ZeroTier on Synology. Follow this guide to the letter. Spoiler: You will need to enable SSH on your NAS (check the port!) and install Docker (Package center).\nAuthorize members (devices) to the network You\u0026rsquo;ve now enabled ZeroTier on your devices, but they both need to be authorized. Go to the ZeroTier configuration page. The top collapsible should say \u0026ldquo;Members\u0026rdquo;. There is a refreshable list of members that are connected to the network. Select the ones you want to authorize (checkbox) and click the button \u0026ldquo;Authorize\u0026rdquo;.\nRepeat the status checks on your jump box to see if the box is authorized. It should state OK PRIVATE.\nNow if you want to verify if it works, install ZeroTier on your phone or laptop and join the network (don\u0026rsquo;t forget to authorize!). Now check if you can reach one of the other connected devices.\nIf you want to specify IP addresses in your network, play with the settings in the \u0026lsquo;Advanced\u0026rsquo; section on the ZeroTier configuration page.\n","permalink":"https://bowlofbytes.com/posts/setup-zerotier-tunnel/","summary":"\u003cp\u003eSometimes when working with a homelab and VPN\u0026rsquo;s you just want to skip all the config and just create a tunnel\nto your home network and/or (Synology) NAS. Read how ZeroTier gets this done!\u003c/p\u003e","title":"Using ZeroTier as VPN-tunnel"},{"content":"In my quest of building a homelab I wanted to set up a VPN to access my internal network from anywhere. Read on to see how I\u0026rsquo;ve set this up with Wireguard.\nThe plan Among other devices in my network I have a Synology NAS, which I don\u0026rsquo;t want to expose to the internet. But I do want to be able to connect to the NAS and work on my homelab servers from outside my home.\nI\u0026rsquo;ve chosen Wireguard to serve as my VPN protocol. It\u0026rsquo;s quite easy to set up and has apps available on mobile and desktop platforms. The only thing is, you will need a static public IP address to be able to connect. If you don\u0026rsquo;t have that you can either use a service like ZeroTier or a Dynamic DNS (DDNS) service.\nLet\u0026rsquo;s dive into setting up Wireguard on a Debian based system, in my case a Raspberry Pi. WireGuard is a lightweight, fast, and secure VPN protocol. You use it by installing the WireGuard app on your phone or laptop then importing a configuration file provided by the server. Now you\u0026rsquo;re ready to connect!\nWireguard installation → Install Wireguard.\nLet\u0026rsquo;s also install qrencode to generate a QR code for the mobile client, which can be scanned right off the terminal to add the VPN profile to the Wireguard app.\n1 sudo apt install wireguard qrencode -y → Create a private and public key for the server. Don\u0026rsquo;t share your private key with anyone.\n1 2 mkdir vpn \u0026amp;\u0026amp; cd vpn wg genkey | tee server_privatekey | wg pubkey \u0026gt; server_publickey A private and public key will also need to be generated for the every single client that connects via Wireguard. I tested this via my mobile phone with the Wireguard app.\n→ Create a private and public key for the mobile client.\n1 2 mkdir clients \u0026amp;\u0026amp; cd clients wg genkey | tee phone_privatekey | wg pubkey \u0026gt; phone_publickey Server configuration → Edit /etc/wireguard/wg0.conf and add the following configuration:\n1 2 3 4 5 6 7 8 9 10 [Interface] PrivateKey = \u0026lt;server private key\u0026gt; Address = 10.7.70.5/24 ListenPort = 51820 PostUp = iptables -A FORWARD -i wg0 -o eth0 -j ACCEPT; iptables -A FORWARD -i eth0 -o wg0 -m state --state RELATED,ESTABLISHED -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE PostDown = iptables -D FORWARD -i wg0 -o eth0 -j ACCEPT; iptables -D FORWARD -i eth0 -o wg0 -m state --state RELATED,ESTABLISHED -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE [Peer] PublicKey = \u0026lt;phone public key\u0026gt; AllowedIPs = 10.7.70.0/24 Replace and with the keys you generated earlier. Double-check your network device name (eth0 in this case). Run ip a to confirm it. Your VPN subnet (10.7.70.0/24) must not clash with your home subnet. You can name the config anything instead of wg0. Just make sure you use that name everywhere instead. Server [Interface] PrivateKey Paste your generated private key here. Address Subnet for your VPN, make sure this is different than your home subnet. ListenPort Port for Wireguard to work on. PostUp Enable traffic forwarding and Network Address Translation; makes sure you can access your home subnet. PostUp Remove traffic forwarding and NAT, when disabling Wireguard. Server [Peer] PublicKey Paste your generated public key for your client, in our case \u0026lsquo;phone\u0026rsquo; here. AllowedIPs Allowed IP\u0026rsquo;s to be assigned to client. Add multiple [Peer] sections for each client you want to connect to the VPN.\nClient specific configuration → Create a client configuration file, phone.conf in the already created clients directory.\n1 2 3 4 5 6 7 8 [Interface] PrivateKey = \u0026lt;phone private key\u0026gt; Address = 10.7.70.10/32 [Peer] PublicKey = \u0026lt;server public key\u0026gt; Endpoint = \u0026lt;your IP or public domain\u0026gt;:51820 AllowedIPs = 10.7.70.0/24, 192.168.0.0/24 ✅ This file is the one you have to distribute to your clients Wireguard app!\nClient [Interface] PrivateKey Paste your generated private key here, for your client (phone). Address Indicate the actual IP the client is going to be assigned to. Client [Peer] PublicKey Paste your generated public key for your client, in our case \u0026lsquo;phone\u0026rsquo; here. Endpoint Put your IP or domain here. It\u0026rsquo;s your own (external) IP. AllowedIPs IP ranges reachable by the client. In this case the VPN subnet and the home subnet. Commands → Enable and start the Wireguard service based on you wg0 configuration file.\n1 2 sudo systemctl enable wg-quick@wg0 sudo systemctl start wg-quick@wg0 → Stop Wireguard for the wg0 configuration. This will reset the network configuration.\n1 sudo wg-quick down wg0 → Start Wireguard with the wg0 configuration:\n1 sudo wg-quick up wg0 → Restart Wireguard after making a config change:\n1 sudo systemctl restart wg-quick@wg0 Generate a QR code to scan To be able to use the VPN on your mobile phone, install the Wireguard app. You can generate a QR code in the terminal with qrencode, open the app and scan the code to add the VPN profile.\n1 qrencode -t ansiutf8 \u0026lt; clients/phone.conf Verifying and troubleshooting (1) Verify via your phone or device You should be able to connect from your phone to your internal network.\nTurn off Wi-Fi on your phone. Connect to the VPN (either by scanning the QR code on your phone or importing the configuration file). Try accessing your NAS or router’s web interface. (2) Check if the VPN still works after a reboot 1 2 3 sudo reboot # ... sudo wg show (?) My VPN server is not reachable anymore This is mostly due to a mis-configuration in the IP ranges in the wg0.conf file.\nMake sure the internal subnet actually matches with yours. Double check if the VPN subnet is different from the internal one. (?) I\u0026rsquo;ve added a new client, but it can\u0026rsquo;t connect to anything on my (internal) network You may have forgotten to add a new [Peer] section in the wg0.conf file You did not restart the Wireguard service after adding the new client (sudo systemctl restart wg-quick@wg0) Did you distribute a correct client file with correct IP-addresses and ranges that don\u0026rsquo;t conflict with other clients? ","permalink":"https://bowlofbytes.com/posts/setup-wireguard-vpn/","summary":"\u003cp\u003eIn my quest of building a homelab I wanted to set up a VPN to access my internal network from\nanywhere. Read on to see how     I\u0026rsquo;ve set this up with Wireguard.\u003c/p\u003e","title":"Setting up a VPN with WireGuard"},{"content":"I needed to dust off my trusty Raspberry Pi 2 for a new project, only to discover its Raspbian version was ancient history. With no SD-card reader in sight, I took the road less traveled: a manual upgrade adventure.\nI\u0026rsquo;ve set out on a quest to build myself a homelab, with some network infrastructure. As VPN gateway I decided to use my Raspberry PI 2, with 1GB of RAM and a ARMv7 1200Mhz processor.\nI booted up the Raspberry, and used the recovery mode to reset the OS to its original, which was Raspbian Jessie. With Jessie officially retired and brimming with potential security risks, upgrading to the shiny new Raspbian Bookworm became my quest.\nI didn\u0026rsquo;t have an SD-card reader, so I couldn\u0026rsquo;t just flash a new image to the SD-card. No problem! We can just manually upgrade.\nSince Raspbian installs with a GUI, lets get rid of that first. With Ctrl+Alt+1 we can switch to a terminal. Login with pi and password raspberry. You should change this later ;)\n1 2 3 4 5 6 7 # Remove GUI packages to free up space and simplify the system. sudo apt purge --auto-remove \\ raspberrypi-ui-mods lxpanel lxappearance openbox lightdm xserver* \\ libreoffice* gvfs* desktop-base pix* gnome* gpicview xarchiver \\ chromium* x11-xserver-util xserver-xorg libx11-* wolfram-engine xarchiver \\ xfont* desktop-base openjdk-11-jdk libgtk2* libgtk* imagemagick* \\ gnome-icon-theme adwaita-icon-theme qt-* qt5* xpdf* *wayland* ⚠️️ This command aggressively removes GUI-related packages and dependencies. Double-check the list to ensure you’re not removing something critical for your setup.\nNow for the upgrading process, upgrading directly to the newest version is not recommended because of the huge amount of changes in dependencies.\nSince we\u0026rsquo;re working with Jessie we can\u0026rsquo;t use the configured repository, since it\u0026rsquo;s no longer available.\n→ Remove all other lines, and add this one to /etc/apt/sources.list:\n1 deb http://legacy.raspbian.org/raspbian/ jessie main contrib non-free rpi → Run the following commands to update all the Jessie packages:\n1 2 3 4 sudo apt update sudo apt upgrade -y sudo apt dist-upgrade -y sudo apt autoremove -y To Stretch → Now we can upgrade to Stretch. Change /etc/apt/sources.list to this line:\n1 deb http://legacy.raspbian.org/raspbian/ stretch main contrib non-free rpi → Replace jessie with stretch in the /etc/apt/sources.list.d/*.list files, and upgrade away:\n1 2 3 4 5 sudo sed -i \u0026#39;s/jessie/stretch/g\u0026#39; /etc/apt/sources.list.d/*.list sudo apt update sudo apt upgrade -y sudo apt dist-upgrade -y sudo apt autoremove -y To Buster → Repeat the same to upgrade to Buster; in /etc/apt/sources.list:\n1 deb http://legacy.raspbian.org/raspbian/ buster main contrib non-free rpi → Then run:\n1 2 3 4 5 sudo sed -i \u0026#39;s/stretch/buster/g\u0026#39; /etc/apt/sources.list.d/*.list sudo apt update sudo apt upgrade -y sudo apt dist-upgrade -y sudo apt autoremove -y To Bullseye → Again, repeat the same to upgrade to Bullseye; in /etc/apt/sources.list:\n1 deb http://raspbian.raspberrypi.org/raspbian/ bullseye main contrib non-free rpi → Then run:\n1 sudo sed -i \u0026#39;s/buster/bullseye/g\u0026#39; /etc/apt/sources.list.d/*.list To upgrade to Bullseye, we manually have to remove the ui repo from the *.list files, since it\u0026rsquo;s not available anymore.\n→ Edit every file in /etc/apt/sources.list.d/ and remove the ui string.\n→ Now run the following, and pay attention to installing gcc-8-base:\n1 2 3 4 5 sudo apt update sudo apt upgrade -y sudo apt install gcc-8-base sudo apt dist-upgrade -y sudo apt autoremove -y To Bookworm! And lastly, we can upgrade to Bookworm. In /etc/apt/sources.list:\n1 deb http://raspbian.raspberrypi.org/raspbian/ bookworm main contrib non-free rpi → Now for the last time :)\n1 2 3 4 5 6 sudo sed -i \u0026#39;s/bullseye/bookworm/g\u0026#39; /etc/apt/sources.list.d/*.list sudo apt update sudo apt upgrade -y sudo apt dist-upgrade -y sudo apt autoremove -y sudo reboot And there you have it! A Raspberry Pi 2, manually upgraded to the latest version of Raspbian. Verify this by running cat /etc/os-release, and you should see:\n1 PRETTY_NAME=\u0026#34;Raspbian GNU/Linux 12 (bookworm)\u0026#34; ","permalink":"https://bowlofbytes.com/posts/manually-upgrading-a-raspberry-pi-2/","summary":"\u003cp\u003eI needed to dust off my trusty Raspberry Pi 2 for a new project, only to discover its Raspbian version was ancient history.\nWith no SD-card reader in sight, I took the road less traveled: a manual upgrade adventure.\u003c/p\u003e","title":"Manually upgrading a Raspberry Pi 2"}]